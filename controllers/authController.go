package controllers

import (
	"bytes"
	"ced-paper/CED-Authentication/_const"
	"ced-paper/CED-Authentication/cert"
	"ced-paper/CED-Authentication/contract"
	"ced-paper/CED-Authentication/elliptic/sm9curve"
	"ced-paper/CED-Authentication/sm/sm9"
	"context"
	"crypto/x509"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/gofrs/uuid"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)

type AuthController struct {
	BaseController
}

func (c *AuthController) Test() {
	c.Success(nil, "welcome to authentication")
}

func (c *AuthController) CaAuth() {
	reqUrl := c.Ctx.Request.PostForm.Get("url")
	start := time.Now()
	uuids, _ := uuid.NewV4()
	id := uuids.String()
	ts := time.Now().String()
	mk := sm9.Mk()
	mkBytes, _ := json.Marshal(mk)
	fmt.Println(string(mkBytes))
	enc := sm9.Encrypt(mk.MEncPk, []byte(id+ts), _const.Edge_A, _const.H_Id)
	values := url.Values{}
	values.Add("enc", sm9.EncodeEnc(enc))
	//resp, _ := http.Post("http://localhost:8080/caAuthBack", "application/json", bytes.NewReader(bytesData))
	resp, _ := http.PostForm(reqUrl, values)
	body, _ := ioutil.ReadAll(resp.Body)
	superResult := SuperResult{}
	err := json.Unmarshal(body, &superResult)
	if err != nil {
		c.Error(500, "error", err)
	}
	respData := superResult.Data.(string)
	enc = sm9.DecodeEnc(respData)
	uk1 := sm9.Uk1()
	decRes := sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	res := map[string]string{}
	json.Unmarshal(decRes, &res)
	ellapsed := time.Since(start)
	fmt.Println(res)
	fmt.Println("ellapsed: ", ellapsed.Nanoseconds()/1000000, " ms")
	c.Success(res, "success")
}

func (c *AuthController) CaAuthBack() {
	encStr := c.Ctx.Request.PostForm.Get("enc")
	enc := sm9.DecodeEnc(encStr)
	uk1 := sm9.Uk1()
	result := sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	fmt.Println(string(result))
	gasPrice, _ := contract.Cli.SuggestGasPrice(context.Background())
	s, err := contract.ReadStorage(contract.Cli, contract.AuthCli, contract.Instance, gasPrice, _const.SuggestHighGasLimit)
	if err != nil {
		c.Error(500, "call contract error", err)
		return
	}
	fmt.Println(s)
	certificate, _, _ := cert.GenDCA(string(_const.Edge_A), contract.Certificate, contract.CaSk)
	resData := map[string]string{}
	caBytes, _ := json.Marshal(certificate)
	resData["certificate"] = hex.EncodeToString(caBytes)
	ts := time.Now().String()
	resData["ts"] = ts
	resBytes, _ := json.Marshal(resData)
	mk := sm9.Mk()
	enc = sm9.Encrypt(mk.MEncPk, resBytes, _const.Edge_A, _const.H_Id)
	encStr = sm9.EncodeEnc(enc)
	c.Success(encStr, "CA back")
}

func (c *AuthController) EdgeToCloud() {
	reqUrl1 := c.Ctx.Request.PostForm.Get("url1")
	reqUrl2 := c.Ctx.Request.PostForm.Get("url2")
	gen1, _ := uuid.NewV4()
	gen2, _ := uuid.NewV4()
	idC := gen1.String()
	idE := gen2.String()
	N1 := sm9curve.RandomValue()
	Ce := ""
	ts := time.Now().String()
	var buf bytes.Buffer
	buf.WriteString(idE)
	buf.WriteString(idC)
	buf.WriteString(N1.String())
	buf.WriteString(Ce)
	buf.WriteString(ts)
	mk := sm9.Mk()
	enc := sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	values := url.Values{}
	values.Add("enc", sm9.EncodeEnc(enc))
	//resp, _ := http.Post("http://localhost:8080/caAuthBack", "application/json", bytes.NewReader(bytesData))
	resp, _ := http.PostForm(reqUrl1, values)
	body, _ := ioutil.ReadAll(resp.Body)
	superResult := SuperResult{}
	err := json.Unmarshal(body, &superResult)
	if err != nil {
		c.Error(500, "error", err)
	}
	respData := superResult.Data.(string)
	enc = sm9.DecodeEnc(respData)
	uk1 := sm9.Uk1()
	M4 := sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	fmt.Println(string(M4))
	gasPrice, _ := contract.Cli.SuggestGasPrice(context.Background())
	s, err := contract.ReadStorage(contract.Cli, contract.AuthCli, contract.Instance, gasPrice, _const.SuggestHighGasLimit)
	if err != nil {
		c.Error(500, "call contract error", err)
		return
	}
	fmt.Println(s)
	a := sm9curve.RandomValue()
	b := sm9curve.RandomValue()
	A := new(sm9curve.G1).ScalarBaseMult(a)
	new(sm9curve.G1).ScalarMult(A, b)
	buf.Reset()
	buf.WriteString(idC)
	buf.WriteString(idE)
	buf.Write(a.Bytes())
	buf.Write(b.Bytes())
	buf.Write(A.Marshal())
	n3 := sm9curve.RandomValue()
	ts5 := time.Now().String()
	enc = sm9.Encrypt(mk.MEncPk, n3.Bytes(), _const.Edge_A, _const.H_Id)
	encStr := sm9.EncodeEnc(enc)
	buf.WriteString(encStr)
	buf.WriteString(ts5)
	M5 := sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	res := map[string]string{}
	res["other"] = sm9.EncodeEnc(M5)
	res["enc"] = encStr
	values = url.Values{}
	resBytes, _ := json.Marshal(res)
	values.Add("enc", hex.EncodeToString(resBytes))
	//resp, _ := http.Post("http://localhost:8080/caAuthBack", "application/json", bytes.NewReader(bytesData))
	resp, _ = http.PostForm(reqUrl2, values)
	body, _ = ioutil.ReadAll(resp.Body)
	superResult = SuperResult{}
	err = json.Unmarshal(body, &superResult)
	if err != nil {
		c.Error(500, "error", err)
	}
	respData = superResult.Data.(string)

}

func (c *AuthController) EdgeToCloudBack1() {
	encStr := c.Ctx.Request.PostForm.Get("enc")
	enc := sm9.DecodeEnc(encStr)
	uk1 := sm9.Uk1()
	M3 := sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	fmt.Println(string(M3))
	caStr := ""
	caBytes, _ := hex.DecodeString(caStr)
	var ca *x509.Certificate
	err := json.Unmarshal(caBytes, &ca)
	if err != nil {
		c.Error(500, "json unmarshal error", err)
		return
	}
	gasPrice, _ := contract.Cli.SuggestGasPrice(context.Background())
	s, err := contract.ReadStorage(contract.Cli, contract.AuthCli, contract.Instance, gasPrice, _const.SuggestHighGasLimit)
	if err != nil {
		c.Error(500, "call contract error", err)
		return
	}
	fmt.Println(s)
	verifyDCA := cert.VerifyDCA(contract.Certificate, ca)
	fmt.Println(verifyDCA)
	idC := "f0622183-dd0f-4d4c-b4b3-0b2c6f462c04"
	idE := "83dda2fc-e9ec-4254-a484-8dac67d34f0f"
	n1 := sm9curve.RandomValue()
	n2 := sm9curve.RandomValue()
	nC := sm9curve.RandomValue()
	GNc := new(sm9curve.G1).ScalarBaseMult(nC)
	CcBytes, _ := json.Marshal(contract.Certificate)
	var buf bytes.Buffer
	buf.WriteString(idE)
	buf.WriteString(idC)
	buf.Write(n1.Bytes())
	buf.Write(n2.Bytes())
	buf.Write(GNc.Marshal())
	buf.Write(CcBytes)
	mk := sm9.Mk()
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	encStr = sm9.EncodeEnc(enc)
	c.Success(encStr, "EdgeToCloudBack1 back")
}

func (c *AuthController) EdgeToCloudBack2() {

}

func (c *AuthController) TimeTest() {
	mk := sm9.Mk()
	uk1 := sm9.Uk1()
	t1 := time.Now()
	uuids, _ := uuid.NewV4()
	e1 := time.Since(t1)
	fmt.Println("生成uuid时间: ", e1)
	id := uuids.String()
	var buf bytes.Buffer
	buf.WriteString(id)
	// 1
	t2 := time.Now()
	enc := sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e2 := time.Since(t2)
	fmt.Println("enc 1: ", e2)
	t3 := time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e3 := time.Since(t3)
	fmt.Println("dec 1: ", e3)
	// 2
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 2: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 2: ", e2)
	// 3
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 3: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 3: ", e2)
	// 4
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 4: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 4: ", e2)
	// 5
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 5: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 5: ", e2)
	// 6
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 6: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 6: ", e2)
	// 7
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 7: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 7: ", e2)
	// 8
	t1 = time.Now()
	buf.WriteString(id)
	enc = sm9.Encrypt(mk.MEncPk, buf.Bytes(), _const.Edge_A, _const.H_Id)
	e1 = time.Since(t1)
	fmt.Println("enc 8: ", e1)
	t2 = time.Now()
	sm9.Decrypt(enc, _const.Edge_A, uk1.EncSk)
	e2 = time.Since(t2)
	fmt.Println("dec 8: ", e2)
	// scalar base
	t1 = time.Now()
	r := sm9curve.RandomValue()
	A := new(sm9curve.G1).ScalarBaseMult(r)
	e1 = time.Since(t1)
	fmt.Println("g1 ScalarBaseMult: ", e1)
	// scalar mult
	t1 = time.Now()
	B := new(sm9curve.G1).ScalarMult(A, r)
	e1 = time.Since(t1)
	fmt.Println("g1 ScalarMult: ", e1)
	// g1 add
	t1 = time.Now()
	new(sm9curve.G1).Add(A, B)
	e1 = time.Since(t1)
	fmt.Println("g1 add: ", e1)
	// generate ca
	t1 = time.Now()
	certificate, _, _ := cert.GenDCA("test", contract.Certificate, contract.CaSk)
	e1 = time.Since(t1)
	fmt.Println("gen dca: ", e1)
	// verify ca
	t1 = time.Now()
	cert.VerifyDCA(contract.Certificate, certificate)
	e1 = time.Since(t1)
	fmt.Println("verify dca: ", e1)
	// read chain
	t1 = time.Now()
	gasPrice, _ := contract.Cli.SuggestGasPrice(context.Background())
	contract.ReadStorage(contract.Cli, contract.AuthCli, contract.Instance, gasPrice, _const.SuggestHighGasLimit)
	e1 = time.Since(t1)
	fmt.Println("read chain: ", e1)
	// write chain
	t1 = time.Now()
	contract.Store(contract.Cli, contract.AuthCli, contract.Instance, id, gasPrice, _const.SuggestHighGasLimit)
	e1 = time.Since(t1)
	fmt.Println("write chain: ", e1)
	c.Success(nil, "success")
}
